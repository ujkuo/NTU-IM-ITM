# -*- coding: utf-8 -*-
"""PA1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11CVnK9YPRar84p4gQ-KCDiWrsqpEz5k9
"""

# import packages
# from nltk.tokenize import word_tokenize
from collections import Counter
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
import numpy as np
import os
# import nltk

!python -V

"""[TODO]
- pre-processor the data
    - punc, lowercase, eng stop_words
- vectorize the data
- calculate the cosine similarity
"""

filedir = "./PA1-data"
data = []
for i in range(1, 1096):
  doc_name = "./PA1-data/" + str(i) + ".txt"
  file = os.path.expanduser(doc_name)
  f = open(file)
  docs = f.read().splitlines()
  docs = ''.join(docs)
  data.append(docs)

print(data[0])

TFIDF_vectorizer = TfidfVectorizer(stop_words='english', lowercase=True)
TFIDF_vectors = TFIDF_vectorizer.fit_transform(data)
TFIDF_vectors

outdir = "./out/"
for i, row in enumerate(TFIDF_vectors):
  np.savetxt(outdir + f'{i+1}.vec', row.toarray(), delimiter=",")

for i in range(1, 1096):
  file = "./output/" + str(i) + ".vec"
  output = open(file, "w")
  for row in TFIDF_vectors.toarray()[i-1]:
    output.write(str(i) + "," + str(row))
    output.write("\n")
  output.close()

#with open("./out/1.vec", "r") as f:
  #print(f.read())

#with open("./output/1.vec", "r") as f:
  #print(f.read())

# write doc1 and doc3
# note that it should print all terms with "non-zero" tf-idf
with open("doc1.txt", "w") as f:
  print((TFIDF_vectors.toarray()[0] != 0).sum(), file = f)
  print("t_index,tf-idf", file = f)
  index = np.arange(TFIDF_vectors.shape[1])[(TFIDF_vectors.toarray()[0] != 0)]
  tfidf = (TFIDF_vectors.toarray()[0])[(TFIDF_vectors.toarray()[0] != 0)]
  for t_index, tfidf_value in zip(index, tfidf):
      print(f"{t_index},{tfidf_value}", file = f)

with open("doc3.txt", "w") as f:
  print((TFIDF_vectors.toarray()[2] != 0).sum(), file = f)
  print("t_index,tf-idf", file = f)
  index = np.arange(TFIDF_vectors.shape[1])[(TFIDF_vectors.toarray()[2] != 0)]
  tfidf = (TFIDF_vectors.toarray()[2])[(TFIDF_vectors.toarray()[2] != 0)]
  for t_index, tfidf_value in zip(index, tfidf):
      print(f"{t_index},{tfidf_value}", file = f)

# calculate cosine similarity
cosine_similarity(TFIDF_vectors, TFIDF_vectors)[0][1]

### print the cosine similarity
print("The cosine similarity of 1.vec and 2.vec is",cosine_similarity(TFIDF_vectors[0], TFIDF_vectors[1]).flatten()[0])